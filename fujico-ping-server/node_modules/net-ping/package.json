{
  "name": "net-ping",
  "version": "1.1.4",
  "description": "Ping many hosts at once.",
  "main": "index.js",
  "directories": {
    "example": "example"
  },
  "dependencies": {
    "raw-socket": "*"
  },
  "contributors": [
    {
      "name": "Stephen Vickers",
      "email": "stephen.vickers.sv@gmail.com"
    }
  ],
  "repository": {
    "type": "mercurial",
    "url": "https://bitbucket.org/stephenwvickers/node-net-ping"
  },
  "keywords": [
    "echo",
    "icmp",
    "monitor",
    "monitoring",
    "net",
    "network",
    "ping"
  ],
  "author": {
    "name": "Stephen Vickers",
    "email": "stephen.vickers.sv@gmail.com"
  },
  "license": "GPL",
  "readme": "\n# net-ping - [homepage][homepage]\n\nThis module implements ICMP Echo (ping) support for [Node.js][nodejs].\n\nThis module is installed using [node package manager (npm)][npm]:\n\n    npm install net-ping\n\nIt is loaded using the `require()` function:\n\n    var ping = require (\"net-ping\");\n\nA ping session can then be created to ping many hosts:\n\n    var session = ping.createSession ();\n\n    session.pingHost (target, function (error, target) {\n        if (error)\n            console.log (target + \": \" + error.toString ());\n        else\n            console.log (target + \": Alive\");\n    });\n\n[homepage]: http://re-tool.org \"Homepage\"\n[nodejs]: http://nodejs.org \"Node.js\"\n[npm]: https://npmjs.org/ \"npm\"\n\n# Network Protocol Support\n\nThis module supports IPv4 using the ICMP, and IPv6 using the ICMPv6.\n\n# Error Handling\n\nEach request exposed by this module (currently only `pingHost()`) requires a\nmandatory callback function.  The callback function is executed once the\nrequest has completed.\n\nA request can complete in a number of ways, for example the request timed out,\na response was received from a host other than the targeted host (i.e. a\ngateway) or an error occurred when sending the request.\n\nAll errors excluding a timed out error are passed to the callback function as\nan instance of the `Error` object.  For timed out errors the error passed to\nthe callback function will be an instance of the `ping.RequestTimedOutError`\nobject, with the exposed `message` attribute set to `Request timed out`.\n\nThis makes it easy to determine if a host responded or whether an error\noccurred:\n\n    session.pingHost (\"1.2.3.4\", function (error, target) {\n        if (error)\n            if (error instanceof ping.RequestTimedOutError)\n                console.log (target + \": Not alive\");\n            else\n                console.log (target + \": \" + error.toString ());\n        else\n            console.log (target + \": Alive\");\n    });\n\nThe `Session` class will emit an `error` event for any other error not\ndirectly associated with a request.\n\n# Packet Size\n\nBy default ICMP echo request packets sent by this module are 16 bytes in size.\nSome implementations cannot cope with such small ICMP echo requests.  For\nexample, some implementations will return an ICMP echo reply, but will include\nan incorrect ICMP checksum.\n\nThis module exposes a `packetSize` option to the `createSession()` method which\nspecifies how big ICMP echo request packets should be:\n\n    var session = ping.createSession ({packetSize: 64});\n\n# Constants\n\nThe following sections describe constants exported and used by this module.\n\n## ping.NetworkProtocol\n\nThis object contains constants which can be used for the `networkProtocol`\noption to the `createSession()` function exposed by this module.  This option\nspecifies the IP protocol version to use when creating the raw socket.\n\nThe following constants are defined in this object:\n\n * `IPv4` - IPv4 protocol\n * `IPv6` - IPv6 protocol\n\n# Using This Module\n\nThe `Session` class is used to issue ping requests to many hosts.  This module\nexports the `createSession()` function which is used to create instances of\nthe `Session` class.\n\n## ping.createSession ([options])\n\nThe `createSession()` function instantiates and returns an instance of the\n`Session` class:\n\n    // Default options\n    var options = {\n        networkProtocol: ping.NetworkProtocol.IPv4,\n        packetSize: 16,\n        retries: 1,\n        timeout: 2000\n    };\n    \n    var session = ping.createSession (options);\n\nThe optional `options` parameter is an object, and can contain the following\nitems:\n\n * `networkProtocol` - Either the constant `ping.NetworkProtocol.IPv4` or the\n   constant `ping.NetworkProtocol.IPv6`, defaults to the constant\n   `ping.NetworkProtocol.IPv4`\n * `packetSize` - How many bytes each ICMP echo request packet should be,\n   defaults to `16`, if the value specified is less that `8` then the value\n   `8` will be used\n * `retries` - Number of times to re-send a ping requests, defaults to `1`\n * `timeout` - Number of milliseconds to wait for a response before re-trying\n   or failing, defaults to `2000`\n\nAfter creating the ping `Session` object an underlying raw socket will be\ncreated.  If the underlying raw socket cannot be opened an exception with be\nthrown.  The error will be an instance of the `Error` class.\n\nSeperate instances of the `Session` class must be created for IPv4 and IPv6.\n\n## session.on (\"close\", callback)\n\nThe `close` event is emitted by the session when the underlying raw socket\nis closed.\n\nNo arguments are passed to the callback.\n\nThe following example prints a message to the console when the underlying raw\nsocket is closed:\n\n    session.on (\"close\", function () {\n        console.log (\"socket closed\");\n    });\n\n## session.on (\"error\", callback)\n\nThe `error` event is emitted by the session when the underlying raw socket\nemits an error.\n\nThe following arguments will be passed to the `callback` function:\n\n * `error` - An instance of the `Error` class, the exposed `message` attribute\n   will contain a detailed error message.\n\nThe following example prints a message to the console when an error occurs\nwith the underlying raw socket, the session is then closed:\n\n    session.on (\"error\", function (error) {\n        console.log (error.toString ());\n        session.close ();\n    });\n\n## session.close ()\n\nThe `close()` method closes the underlying raw socket, and cancels all\noutstanding requsts.\n\nThe calback function for each outstanding ping requests will be called.  The\nerror parameter will be an instance of the `Error` class, and the `message`\nattribute set to `Socket forcibly closed`.\n\nThe sessoin can be re-used simply by submitting more ping requests, a new raw\nsocket will be created to serve the new ping requests.  This is a way in which\nto clear outstanding requests.\n\nThe following example submits a ping request and prints the target which\nsuccessfully responded first, and then closes the session which will clear the\nother outstanding ping requests.\n\n    var targets = [\"1.1.1.1\", \"2.2.2.2\", \"3.3.3.3\"];\n    \n    for (var i = 0; i < targets.length; i++) {\n        session.pingHost (targets[i], function (error, target) {\n            if (! error) {\n                console.log (target);\n                session.close (); \n            }\n        });\n    }\n\n## session.pingHost (target, callback)\n\nThe `pingHost()` method sends a ping request to a remote host.\n\nThe `target` parameter is the dotted quad formatted IP address of the target\nhost for IPv4 sessions, or the compressed formatted IP address of the target\nhost for IPv6 sessions.\n\nThe `callback` function is called once the ping requests is complete.  The\nfollowing arguments will be passed to the `callback` function:\n\n * `error` - Instance of the `Error` class or a sub-class, or `null` if no\n   error occurred\n * `target` - The target parameter as specified in the request, note that\n   if a gateway responds on behalf of the target host this parameter will\n   still be the target host and NOT the responding gateway\n\nThe following example sends a ping request to a remote host:\n\n\tsession.pingHost (\"fe80::a00:27ff:fe2a:3427\", function (error, target) {\n\t\tif (error)\n\t\t\tconsole.log (target + \": \" + error.toString ());\n\t\telse\n\t\t\tconsole.log (target + \": Alive\");\n\t});\n\n# Example Programs\n\nExample programs are included under the modules `example` directory.\n\n# Bugs & Known Issues\n\nNone, yet!\n\nBug reports should be sent to <stephen.vickers.sv@gmail.com>.\n\n# Changes\n\n## Version 1.0.0 - 03/02/2013\n\n * Initial release\n\n## Version 1.0.1 - 04/02/2013\n\n * Minor corrections to the README.md\n * Add note to README.md about error handling\n * Timed out errors are now instances of the `ping.RequestTimedOutError`\n   object\n\n## Version 1.0.2 - 11/02/2013\n\n * The RequestTimedOutError class is not being exported\n\n## Version 1.1.0 - 13/02/2013\n\n * Support IPv6\n\n## Version 1.1.1 - 15/02/2013\n\n * The `ping.Session.close()` method was not undefining the sessions raw\n   socket after closing\n * Return self from the `pingHost()` method to chain method calls \n\n## Version 1.1.2 - 04/03/2013\n\n * Use the `raw.Socket.pauseRecv()` and `raw.Socket.resumeRecv()` methods\n   instead of closing a socket when there are no more outstanding requests\n\n## Version 1.1.3 - 07/03/2013\n\n * Sessions were limited to sending 65535 ping requests\n\n## Version 1.1.4 - 09/04/2013\n\n * Add the `packetSize` option to the `createSession()` method to specify how\n   many bytes each ICMP echo request packet should be\n\n# Roadmap\n\nIn no particular order:\n\n * Implement traceRoute()\n\nSuggestions and requirements should be sent to <stephen.vickers.sv@gmail.com>.\n\n# License\n\nThis program is free software: you can redistribute it and/or modify it under\nthe terms of the GNU General Public License as published by the Free Software\nFoundation, either version 3 of the License, or (at your option) any later\nversion.\n\nThis program is distributed in the hope that it will be useful, but WITHOUT\nANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\nFOR A PARTICULAR PURPOSE.  See the GNU General Public License for more\ndetails.\n\nYou should have received a copy of the GNU General Public License along with\nthis program.  If not, see\n[http://www.gnu.org/licenses](http://www.gnu.org/licenses).\n\n# Author\n\nStephen Vickers <stephen.vickers.sv@gmail.com>\n",
  "_id": "net-ping@1.1.4",
  "_from": "net-ping"
}
