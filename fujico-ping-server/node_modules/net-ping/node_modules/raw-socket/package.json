{
  "name": "raw-socket",
  "version": "1.1.4",
  "description": "Raw sockets for Node.js.",
  "main": "index.js",
  "directories": {
    "example": "example"
  },
  "dependencies": {},
  "contributors": [
    {
      "name": "Stephen Vickers",
      "email": "stephen.vickers.sv@gmail.com"
    }
  ],
  "repository": {
    "type": "mercurial",
    "url": "https://bitbucket.org/stephenwvickers/node-raw-socket"
  },
  "keywords": [
    "net",
    "network",
    "raw",
    "raw-socket",
    "raw-sockets",
    "socket",
    "sockets"
  ],
  "author": {
    "name": "Stephen Vickers",
    "email": "stephen.vickers.sv@gmail.com"
  },
  "license": "GPL",
  "scripts": {
    "install": "node-gyp rebuild"
  },
  "gypfile": true,
  "readme": "\n# raw-socket - [homepage][homepage]\n\nThis module implements raw sockets for [Node.js][nodejs].\n\n*This module has been created primarily to facilitate implementation of the\n[net-ping][net-ping] module.*\n\nThis module is installed using [node package manager (npm)][npm]:\n\n    # This module contains C++ source code which will be compiled\n    # during installation using node-gyp.  A suitable build chain\n    # must be configured before installation.\n    \n    npm install raw-socket\n\nIt is loaded using the `require()` function:\n\n    var raw = require (\"raw-socket\");\n\nRaw sockets can then be created, and data sent using [Node.js][nodejs]\n`Buffer` objects:\n\n    var socket = raw.createSocket ({protocol: raw.Protocol.None});\n\n    socket.on (\"message\", function (buffer, source) {\n        console.log (\"received \" + buffer.length + \" bytes from \" + source);\n    });\n    \n    socket.send (buffer, 0, buffer.length, \"1.1.1.1\", function (error, bytes) {\n        if (error)\n            console.log (error.toString ());\n    });\n\n[homepage]: http://re-tool.org \"Homepage\"\n[nodejs]: http://nodejs.org \"Node.js\"\n[net-ping]: https://npmjs.org/package/net-ping \"net-ping\"\n[npm]: https://npmjs.org/ \"npm\"\n\n# Network Protocol Support\n\nThe raw sockets exposed by this module support IPv4 and IPv6.\n\nRaw sockets are created using the operating systems `socket()` function, and\nthe socket type `SOCK_RAW` specified.\n\n# Raw Socket Behaviour\n\nRaw sockets behave in different ways depending on operating system and\nversion.  For example when the automatic IP header generation feature is\ndisabled some operating systems will modify the IP header included in the data\nto be sent, i.e. a network card maybe performing IP checksum offload, and the\noperating system may set the `Protocol` field overriding what was provided in\nthe data to be sent.\n\nSome operating system versions may also restict the use of raw sockets to\nprivileged users.  If this is the case an exception will be thrown on socket\ncreation using a message similar to `Operation not permitted` (this message\nis likely to be different depending on operating system version).\n\nThe appropriate operating system documentation should be consulted to\nunderstand how raw sockets will behave before attempting to use this module.\n\n# Keeping The [Node.js][nodejs] Event Loop Alive\n\nThis module uses the `libuv` library to integrate into the [Node.js][nodejs]\nevent loop - this library is also used by [Node.js][nodejs].  An underlying\n `libuv` library `poll_handle_t` event watcher is used to monitor the underlying operating system raw socket used by a socket object.\n\nAll the while a socket object exists, and the sockets `close()` method has not\nbeen called, the raw socket will keep the [Node.js][nodejs] event loop alive\nwhich will prevent a program from exiting.\n\nThis module exports four methods which a program can use to control this\nbehaviour.\n\nThe `pauseRecv()` and `pauseSend()` methods stop the underlying `poll_handle_t`\nevent watcher used by a socket from monitoring for readable and writeable\nevents.  While the `resumeRecv()` and `resumeSend()` methods start the\nunderlying `poll_handle_t` event watcher used by a socket allowing it to\nmonitor for readable and writeable events.\n\nEach socket object also exports the `recvPaused` and `sendPaused` boolean\nattributes to determine the state of the underlying `poll_handle_t` event\nwatcher used by a socket.\n\nSocket creation can be expensive on some platforms, and the above methods offer an alternative to closing and deleting a socket to prevent it from keeping the\n[Node.js][nodejs] event loop alive.\n\nThe [Node.js][nodejs] [net-ping][net-ping] module offers a concrete example\nof using these methods.  Since [Node.js][nodejs] offers no raw socket support\nthis module is used to implement ICMP echo (ping) support.  Once all ping\nrequests have been processed by the [net-ping][net-ping] module the\n`pauseRecv()` and `pauseSend()` methods are used to allow a program to exit if\nrequired.\n\nThe following example stops the underlying `poll_handle_t` event watcher used\nby a socket from generating writeable events, however since readable events\nwill still be watched for the program will not exit immediately:\n\n    if (! socket.recvPaused)\n        socket.pauseRecv ();\n\nThe following can the be used to resume readable events:\n\n    if (socket.recvPaused)\n        socket.resumeRecv ();\n\nThe following example stops the underlying `poll_handle_t` event watcher used\nby a socket from generating both readable and writeable events, if no other\nevent watchers have been setup (e.g. `setTimeout()`) the program will exit.\n\n    if (! socket.recvPaused)\n        socket.pauseRecv ();\n    if (! socket.sendPaused)\n        socket.pauseSend ();\n\nThe following can the be used to resume both readable and writeable events:\n\n    if (socket.recvPaused)\n        socket.resumeRecv ();\n    if (socket.sendPaused)\n        socket.resumeSend ();\n\nWhen data is sent using a sockets `send()` method the `resumeSend()` method\nwill be called if the sockets `sendPaused` attribute is `true`, however the\n`resumeRecv()` method will not be called regardless of whether the sockets\n`recvPaused` attribute is `true` or `false`.\n\n[nodejs]: http://nodejs.org \"Node.js\"\n[net-ping]: http://npmjs.org/package/net-ping \"net-ping\"\n\n# Automatic IP Header Generation\n\nWhen sending a packet over a raw socket the operating system will\nautomatically build an IP header and place it in the outgoing packet ahead of\nthe data to be sent.\n\nThis module offers the ability to disable this behavior.  When disabled IP\nheaders must be created and included in data sent using a raw socket.\n\nThis feature is supported on all platforms for IPv4 raw sockets by utilising\nthe socket option `IP_HDRINCL`.\n\nThis feature is only supported on Windows platforms for IPv6 raw sockets by\nutilising the socket option `IPV6_HDRINCL` - similar options for other\nplatforms are yet to be discovered.\n\nTo enable this feature specify the `noIpHeader` parameter to the\n`createSocket()` method exposed by this module.\n\nThis feature can be enabled and disabled after socket creation using the\n`noIpHeader()` method exposed by the `Socket` class:\n\n    socket.noIpHeader (true).send (...).noIpHeader (false);\n\n# Automatic Checksum Generation\n\nThis module offers the ability to automatically generate checksums in C++.\nThis offers a performance benefit over generating checksums in JavaScript.\nThis can be used to generate checksums for UDP, TCP and ICMP packets, for\nexample.\n\nChecksums produced by this module are 16 bits long, which falls in line with\nthe checksums required for UDP, TCP and ICMP.\n\nTo enable automatic checksum generation specify the `generateChecksums` and\n`checksumOffset` parameters to the `createSocket()` method exposed by this\nmodule.\n\nFor example this module can be instructed to automatically generate ICMP\nchecksums.  ICMP checksums are located in bytes 3 and 4 of ICMP packets.\nOffsets start from 0 so 2 must be specified when creating the socket:\n\n    var options = {\n        protocol: raw.Protocol.ICMP,\n        generateChecksums: true,\n        checksumOffset: 2\n    };\n\n    var socket = raw.createSocket (options);\n\nWhen ICMP packets are sent using the created socket a 16 bit checksum will be\ngenerated and placed into bytes 3 and 4 before the packet is sent.\n\nAutomatic checksum generation can be disabled after socket creation using the\n`generateChecksums()` method exposed by the `Socket` class:\n\n    socket.generateChecksums (false).send (...).generateChecksums (true, 2);\n\n# Constants\n\nThe following sections describe constants exported and used by this module.\n\n## raw.AddressFamily\n\nThis object contains constants which can be used for the `addressFamily`\noption to the `createSocket()` function exposed by this module.  This option\nspecifies the IP protocol version to use when creating the raw socket.\n\nThe following constants are defined in this object:\n\n * `IPv4` - IPv4 protocol\n * `IPv6` - IPv6 protocol\n\n## raw.Protocol\n\nThis object contains constants which can be used for the `protocol` option to\nthe `createSocket()` function exposed by this module.  This option specifies\nthe protocol number to place in the protocol field of IP headers generated by\nthe operating system.\n\nThe following constants are defined in this object:\n\n * `None` - protocol number 0\n * `ICMP` - protocol number 1\n * `TCP` - protocol number 6\n * `UDP` - protocol number 17\n * `ICMPv6` - protocol number 58\n\n# Using This Module\n\nRaw sockets are represented by an instance of the `Socket` class.  This\nmodule exports the `createSocket()` function which is used to create\ninstances of the `Socket` class.\n\n## raw.createSocket ([options])\n\nThe `createSocket()` function instantiates and returns an instance of the\n`Socket` class:\n\n    // Default options\n    var options = {\n        addressFamily: raw.AddressFamily.IPv4,\n        protocol: raw.Protocol.None,\n        noIpHeader: false,\n        bufferSize: 4096,\n        generateChecksums: false,\n        checksumOffset: 0\n    };\n    \n    var socket = raw.createSocket (options);\n\nThe optional `options` parameter is an object, and can contain the following\nitems:\n\n * `addressFamily` - Either the constant `raw.AddressFamily.IPv4` or the\n   constant `raw.AddressFamily.IPv6`, defaults to the constant\n   `raw.AddressFamily.IPv4`\n * `protocol` - Either one of the constants defined in the `raw.Protocol`\n   object or the protocol number to use for the socket, defaults to the\n   consant `raw.Protocol.None`\n * `noIpHeader` - Either `false` or `true` to specify whether or not to\t\n   automatically generate IP headers, defaults to `false` meaning IP headers\n   will automatically be generated by the operating system\n * `bufferSize` - Size, in bytes, of the sockets internal receive buffer,\n   defaults to 4096\n * `generateChecksums` - Either `true` or `false` to enable or disable the\n   automatic checksum generation feature, defaults to `false`\n * `checksumOffset` - When `generateChecksums` is `true` specifies how many\n   bytes to index into the send buffer to write automatically generated\n   checksums, defaults to `0`\n\nAn exception will be thrown if the underlying raw socket could not be created.\nThe error will be an instance of the `Error` class.\n\nThe `protocol` parameter, or its default value of the constant\n`raw.Protocol.None`, will be specified in the protocol field of each IP\nheader.\n\nUpon receiving packets IP headers are **NOT** removed by the operating system\nwhen using IPv4 raw socket and IP headers in received packets will be included\nin data presented by this module.  When using IPv6 raw sockets IP headers are\n**NOT** included in data presented by this module.\n\n## socket.on (\"close\", callback)\n\nThe `close` event is emitted by the socket when the underlying raw socket\nis closed.\n\nNo arguments are passed to the callback.\n\nThe following example prints a message to the console when the socket is\nclosed:\n\n    socket.on (\"close\", function () {\n        console.log (\"socket closed\");\n    });\n\n## socket.on (\"error\", callback)\n\nThe `error` event is emitted by the socket when an error occurs sending or\nreceiving data.\n\nThe following arguments will be passed to the `callback` function:\n\n * `error` - An instance of the `Error` class, the exposed `message` attribute\n   will contain a detailed error message.\n\nThe following example prints a message to the console when an error occurs,\nafter which the socket is closed:\n\n    socket.on (\"error\", function (error) {\n        console.log (error.toString ());\n        socket.close ();\n    });\n\n## socket.on (\"message\", callback)\n\nThe `message` event is emitted by the socket when data has been received.\n\nThe following arguments will be passed to the `callback` function:\n\n * `buffer` - A [Node.js][nodejs] `Buffer` object containing the data\n   received, the buffer will be sized to fit the data received, that is the\n   `length` attribute of buffer will specify how many bytes were received\n * `address` - For IPv4 raw sockets the dotted quad formatted source IP\n   address of the message, e.g `192.168.1.254`, for IPv6 raw sockets the\n   compressed formatted source IP address of the message, e.g.\n   `fe80::a00:27ff:fe2a:3427`\n\nThe following example prints received messages in hexadecimal to the console:\n\n    socket.on (\"message\", function (buffer, address) {\n        console.log (\"received \" + buffer.length + \" bytes from \" + address\n                + \": \" + buffer.toString (\"hex\"));\n    });\n\n## socket.generateChecksums (generate, offset)\n\nThe `generateChecksums()` method is used to specify whether automatic checksum\ngeneration should be performed by the socket.\n\nThe `generate` parameter is either `true` or `false` to enable or disable the\nfeature.  The optional `offset` parameter specifies how many bytes to index\ninto the send buffer when writing the generated checksum to the send buffer.\n\nThe following example enables automatic checksum generation at offset 2\nresulting in checksums being written to byte 3 and 4 of the send buffer\n(offsets start from 0, meaning byte 1):\n\n    socket.generateChecksums (true, 2);\n\n## socket.noIpHeader (noHeader)\n\nThe `noIpHeader()` method is used to specify whether IP headers will be\nprovided in data to be sent, or whether the operating system should\nautomatically generate IP headers.\n\nThe `noHeader` parameter is either `true` to specify no IP header should be\nautomatically generated by the operating system, or `false` to specify that\nthe operating system should automatically generate IP headers.\n\nThe following example disables automatic IP header generation:\n\n    socket.noIpHeader (true);\n\n## socket.send (buffer, offset, length, address, callback)\n\nThe `send()` method sends data to a remote host.\n\nThe `buffer` parameter is a [Node.js][nodejs] `Buffer` object containing the\ndata to be sent.  The `length` parameter specifies how many bytes from\n`buffer`, beginning at offset `offset`, to send.  For IPv4 raw sockets the\n`address` parameter contains the dotted quad formatted IP address of the\nremote host to send the data to, e.g `192.168.1.254`, for IPv6 raw sockets the\n`address` parameter contains the compressed formatted IP address of the remote\nhost to send the data to, e.g. `fe80::a00:27ff:fe2a:3427`.  The `callback`\nfunction is called once the data has been sent.  The following arguments will\nbe passed to the `callback` function:\n\n * `error` - Instance of the `Error` class, or `null` if no error occurred\n * `bytes` - Number of bytes sent\n\nIf the `noIpHeader` option was specified as `true` when creating the socket,\nor the `noIpHeader()` method exposed by the socket has been called with a\nvalue of `true`, the data to be sent in the `buffer` must include a IP header.\n\nThe following example sends a ICMP ping message to a remote host:\n\n    // ICMP echo (ping) request, checksum should be ok\n    var buffer = new Buffer ([\n            0x08, 0x00, 0x43, 0x52, 0x00, 0x01, 0x0a, 0x09,\n            0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68,\n            0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70,\n            0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x61,\n            0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69]);\n\n    socket.send (buffer, 0, buffer.length, target, function (error, bytes) {\n        if (error)\n            console.log (error.toString ());\n        else\n            console.log (\"sent \" + bytes + \" bytes\");\n    });\n\n# Example Programs\n\nExample programs are included under the modules `example` directory.\n\n# Bugs & Known Issues\n\nNone, yet!\n\nBug reports should be sent to <stephen.vickers.sv@gmail.com>.\n\n# Changes\n\n## Version 1.0.0 - 29/01/2013\n\n * Initial release\n\n## Version 1.0.1 - 01/02/2013\n\n * Move `SOCKET_ERRNO` define from `raw.cc` to `raw.h`\n * Error in exception thrown by `SocketWrap::New` in `raw.cc` stated that two\n   arguments were required, this should be one\n * Corrections to the README.md\n * Missing includes causes compilation error on some systems (maybe Node\n   version dependant)\n\n## Version 1.0.2 - 02/02/2013\n\n * Support automatic checksum generation\n\n## Version 1.1.0 - 13/02/2013\n\n * The [net-ping][net-ping] module is now implemented so update the note about\n   it in the first section of the README.md\n * Support IPv6\n * Support the `IP_HDRINCL` socket option via the `noIpHeader` option to the\n   `createSocket()` function and the `noIpHeader()` method exposed by the\n   `Socket` class\n\n## Version 1.1.1 - 14/02/2013\n\n * IP addresses not being validated\n\n## Version 1.1.2 - 15/02/2013\n\n * Default protocol option to `createSession()` was incorrect in the README.md\n * The `session.on(\"message\")` example used `message` instead of `buffer` in\n   the README.md\n\n## Version 1.1.3 - 04/03/2013\n\n * `raw.Socket.onSendReady()` emit's an error when `raw.SocketWrap.send()`\n   throws an exception when it should call the `req.callback` callback\n * Added the `pauseRecv()`, `resumeRecv()`, `pauseSend()` and `resumeSend()`\n   methods\n\n[net-ping]: https://npmjs.org/package/net-ping \"net-ping\"\n\n# Version 1.1.4 - 05/03/2013\n\n * Cleanup documentation for the `pauseSend()`, `pauseRecv()`, `resumeSend()`\n   and `resumeRecv()` methods in the README.md\n\n# Roadmap\n\nIn no particular order:\n\n * Support some socket options\n * Enhance performance by moving the send queue into the C++ raw::SocketWrap\n   class\n\nSuggestions and requirements should be sent to <stephen.vickers.sv@gmail.com>.\n\n# License\n\nThis program is free software: you can redistribute it and/or modify it under\nthe terms of the GNU General Public License as published by the Free Software\nFoundation, either version 3 of the License, or (at your option) any later\nversion.\n\nThis program is distributed in the hope that it will be useful, but WITHOUT\nANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\nFOR A PARTICULAR PURPOSE.  See the GNU General Public License for more\ndetails.\n\nYou should have received a copy of the GNU General Public License along with\nthis program.  If not, see\n[http://www.gnu.org/licenses](http://www.gnu.org/licenses).\n\n# Author\n\nStephen Vickers <stephen.vickers.sv@gmail.com>\n",
  "_id": "raw-socket@1.1.4",
  "_from": "raw-socket@*"
}
